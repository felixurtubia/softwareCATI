{
  "name": "promise-mysql",
  "version": "1.3.2",
  "description": "A bluebird wrapper for node-mysql",
  "main": "index.js",
  "scripts": {
    "test": "./node_modules/mocha/bin/_mocha -R spec"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/lukeb-uk/node-promise-mysql.git"
  },
  "keywords": [
    "promise",
    "performance",
    "promises",
    "promises-a",
    "promises-aplus",
    "async",
    "await",
    "deferred",
    "deferreds",
    "future",
    "flow control",
    "dsl",
    "fluent interface",
    "database",
    "mysql",
    "mysql-promise",
    "bluebird",
    "q"
  ],
  "author": {
    "name": "Luke Bonaccorsi"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/lukeb-uk/node-promise-mysql/issues"
  },
  "dependencies": {
    "bluebird": "^2.10.2",
    "mysql": "^2.9.0"
  },
  "devDependencies": {
    "chai": "^3.4.1",
    "mocha": "^2.3.4"
  },
  "readme": "Promise-mysql\n==================\n[![Build Status](https://travis-ci.org/lukeb-uk/node-promise-mysql.svg?style=flat&branch=master)](https://travis-ci.org/lukeb-uk/node-promise-mysql?branch=master)\n\nPromise-mysql is a wrapper for [node-mysql](https://github.com/felixge/node-mysql) that wraps function calls with [Bluebird](https://github.com/petkaantonov/bluebird/) promises. Usually this would be done with Bluebird's `.promisifyAll()` method, but node-mysql's footprint is different to that of what Bluebird expects.\n\nTo install promise-mysql, use [npm](http://github.com/isaacs/npm):\n\n```bash\n$ npm install promise-mysql\n```\n\nPlease refer to [node-mysql](https://github.com/felixge/node-mysql) for documentation on how to use the mysql functions and refer to [Bluebird](https://github.com/petkaantonov/bluebird/) for documentation on Bluebird's promises\n\nAt the minute only the standard connection (using `.createConnection()`) and the pool (using `.createPool()`) is supported. `createPoolCluster` is not implemented yet.\n\n## Examples\n\n### Connection\n\nTo connect, you simply call `.createConnection()` like you would on node-mysql:\n```javascript\nvar mysql = require('promise-mysql');\nvar connection;\n\nmysql.createConnection({\n    host: 'localhost',\n    user: 'sauron',\n    password: 'theonetruering',\n    database: 'mordor'\n}).then(function(conn){\n    connection = conn;\n});\n```\n\nTo use the promise, you call the methods as you would if you were just using node-mysql, minus the callback. You then add a .then() with your function in:\n```javascript\nconnection.query('select `name` from hobbits').then(function(rows){\n    // Logs out a list of hobbits\n    console.log(rows);\n});\n```\n\nYou can even chain the promises, using a return within the .then():\n```javascript\nconnection.query('select `id` from hobbits where `name`=\"frodo\"').then(function(rows){\n    // Query the items for a ring that Frodo owns.\n    return connection.query('select * from items where `owner`=\"' + rows[0].id + '\" and `name`=\"ring\"');\n}).then(function(rows){\n    // Logs out a ring that Frodo owns\n    console.log(rows);\n});\n```\n\nYou can catch errors using the .catch() method. You can still add .then() clauses, they'll just get skipped if there's an error\n```javascript\nconnection.query('select * from tablethatdoesnotexist').then(function(){\n\n    return connection.query('select * from hobbits');\n}).catch(function(error){\n    //logs out the error\n    console.log(error);\n});\n\n```\n\n### Pool\n\nUse pool directly:\n\n```javascript\npool = mysql.createPool({\n  host: 'localhost',\n  user: 'sauron',\n  password: 'theonetruering',\n  database: 'mordor',\n  connectionLimit: 10\n});\n\npool.query('select `name` from hobbits').then(function(rows){\n    // Logs out a list of hobbits\n    console.log(rows);\n});\n\n```\n\nGet a connection from the pool:\n\n```javascript\npool.getConnection().then(function(connection) {\n    connection.query('select `name` from hobbits').then(...)\n}).catch(function(err) {\n    done(err);\n});\n```\n\n## Tests\n\nAt the moment only simple basics tests are implemented using Mocha.\nTo run the tests, you need to connect to a running MySQL server. A database or write permissions are not required.\n\nStart the test suite with\n\n```bash\nDB_HOST=localhost DB_USER=user DB_PWD=pwd npm test\n```\n\n## License\n\nThe MIT License (MIT)\n\nCopyright (c) 2014 Luke Bonaccorsi\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "_id": "promise-mysql@1.3.2",
  "_from": "promise-mysql@^1.1.1"
}
