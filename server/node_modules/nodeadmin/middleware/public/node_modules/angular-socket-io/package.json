{
  "name": "angular-socket-io",
  "version": "0.7.0",
  "main": "socket.js",
  "directories": {
    "test": "test"
  },
  "scripts": {
    "test": "./node_modules/.bin/karma start --browsers Firefox --single-run"
  },
  "author": {
    "name": "Brian Ford"
  },
  "license": "MIT",
  "devDependencies": {
    "angular": "^1.3.5",
    "angular-mocks": "^1.3.5",
    "gulp": "^3.8.10",
    "gulp-rename": "~1.2.0",
    "gulp-uglify": "~0.2.1",
    "karma": "~0.10.2",
    "karma-firefox-launcher": "~0.1.0",
    "karma-jasmine": "~0.1.3"
  },
  "readme": "# angular-socket-io [![Build Status](https://travis-ci.org/btford/angular-socket-io.svg)](https://travis-ci.org/btford/angular-socket-io)\n\nBower Component for using AngularJS with [Socket.IO](http://socket.io/),\nbased on [this](http://briantford.com/blog/angular-socket-io.html).\n\n\n## Install\n\n1. `bower install angular-socket-io` or [download the zip](https://github.com/btford/angular-socket-io/archive/master.zip).\n2. Make sure the Socket.IO client lib is loaded. It's often served at `/socket.io/socket.io.js`.\n3. Include the `socket.js` script provided by this component into your app.\n4. Add `btford.socket-io` as a module dependency to your app.\n\n\n## Usage\n\nThis module exposes a `socketFactory`, which is an API for instantiating\nsockets that are integrated with Angular's digest cycle.\n\n\n### Making a Socket Instance\n\n```javascript\n// in the top-level module of the app\nangular.module('myApp', [\n  'btford.socket-io',\n  'myApp.MyCtrl'\n]).\nfactory('mySocket', function (socketFactory) {\n  return socketFactory();\n});\n```\n\nWith that, you can inject your `mySocket` service into controllers and\nother serivices within your application!\n\n### Using Your Socket Instance\n\nBuilding on the example above:\n\n```javascript\n// in the top-level module of the app\nangular.module('myApp', [\n  'btford.socket-io',\n  'myApp.MyCtrl'\n]).\nfactory('mySocket', function (socketFactory) {\n  return socketFactory();\n}).\ncontroller('MyCtrl', function (mySocket) {\n  // ...\n});\n```\n\n\n## API\n\nFor the most part, this component works exactly like you would expect.\nThe only API addition is `socket.forward`, which makes it easier to add/remove listeners in a way that works with [AngularJS's scope](http://docs.angularjs.org/api/ng.$rootScope.Scope).\n\n### `socket.on` / `socket.addListener`\nTakes an event name and callback.\nWorks just like the method of the same name from Socket.IO.\n\n### `socket.removeListener`\nTakes an event name and callback.\nWorks just like the method of the same name from Socket.IO.\n\n### `socket.removeAllListeners`\nTakes an event name.\nWorks just like the method of the same name from Socket.IO.\n\n### `socket.emit`\nSends a message to the server.\nOptionally takes a callback.\n\nWorks just like the method of the same name from Socket.IO.\n\n### `socket.forward`\n\n`socket.forward` allows you to forward the events received by Socket.IO's socket to AngularJS's event system.\nYou can then listen to the event with `$scope.$on`.\nBy default, socket-forwarded events are namespaced with `socket:`.\n\nThe first argument is a string or array of strings listing the event names to be forwarded.\nThe second argument is optional, and is the scope on which the events are to be broadcast.\nIf an argument is not provided, it defaults to `$rootScope`.\nAs a reminder, broadcasted events are propagated down to descendant scopes.\n\n#### Examples\n\nAn easy way to make socket error events available across your app:\n\n```javascript\n// in the top-level module of the app\nangular.module('myApp', [\n  'btford.socket-io',\n  'myApp.MyCtrl'\n]).\nfactory('mySocket', function (socketFactory) {\n  var mySocket = socketFactory();\n  mySocket.forward('error');\n  return mySocket;\n});\n\n// in one of your controllers\nangular.module('myApp.MyCtrl', []).\n  controller('MyCtrl', function ($scope) {\n    $scope.$on('socket:error', function (ev, data) {\n\n    });\n  });\n```\n\nAvoid duplicating event handlers when a user navigates back and forth between routes:\n\n```javascript\nangular.module('myMod', ['btford.socket-io']).\n  controller('MyCtrl', function ($scope, socket) {\n    socket.forward('someEvent', $scope);\n    $scope.$on('socket:someEvent', function (ev, data) {\n      $scope.theData = data;\n    });\n  });\n```\n\n\n### `socketFactory({ ioSocket: }}`\n\nThis option allows you to provide the `socket` service with a `Socket.IO socket` object to be used internally.\nThis is useful if you want to connect on a different path, or need to hold a reference to the `Socket.IO socket` object for use elsewhere.\n\n```javascript\nangular.module('myApp', [\n  'btford.socket-io'\n]).\nfactory('mySocket', function (socketFactory) {\n  var myIoSocket = io.connect('/some/path');\n\n  mySocket = socketFactory({\n    ioSocket: myIoSocket\n  });\n\n  return mySocket;\n});\n```\n\n### `socketFactory({ scope: })`\n\nThis option allows you to set the scope on which `$broadcast` is forwarded to when using the `forward` method.\nIt defaults to `$rootScope`.\n\n\n### `socketFactory({ prefix: })`\n\nThe default prefix is `socket:`.\n\n\n#### Example\n\nTo remove the prefix:\n\n```javascript\nangular.module('myApp', [\n  'btford.socket-io'\n]).\nconfig(function (socketProvider) {\n  socketProvider.prefix('');\n});\n```\n\n\n\n## Migrating from 0.2 to 0.3\n\n`angular-socket-io` version `0.3` changes X to make fewer assumptions\nabout the lifecycle of the socket. Previously, the assumption was that your\napplication has a single socket created at config time. While this holds\nfor most apps I've seen, there's no reason you shouldn't be able to\nlazily create sockets, or have multiple connections.\n\nIn `0.2`, `angular-socket-io` exposed a `socket` service. In `0.3`, it\ninstead exposes a `socketFactory` service which returns socket instances.\nThus, getting the old API is as simple as making your own `socket` service\nwith `socketFactory`. The examples below demonstrate how to do this.\n\n### Simple Example\n\nIn most cases, adding the following to your app should suffice:\n\n```javascript\n// ...\nfactory('socket', function (socketFactory) {\n  return socketFactory();\n});\n// ...\n```\n\n### Example with Configuration\n\nBefore:\n\n```javascript\nangular.module('myApp', [\n  'btford.socket-io'\n]).\nconfig(function (socketProvider) {\n  socketProvider.prefix('foo~');\n  socketProvider.ioSocket(io.connect('/some/path'));\n}).\ncontroller('MyCtrl', function (socket) {\n  socket.on('foo~bar', function () {\n    $scope.bar = true;\n  });\n});\n```\n\nAfter:\n\n```javascript\nangular.module('myApp', [\n  'btford.socket-io'\n]).\nfactory('socket', function (socketFactory) {\n  return socketFactory({\n    prefix: 'foo~',\n    ioSocket: io.connect('/some/path')\n  });\n}).\ncontroller('MyCtrl', function (socket) {\n  socket.on('foo~bar', function () {\n    $scope.bar = true;\n  });\n});\n```\n\n\n## FAQ\n\n[Closed issues labelled `FAQ`](https://github.com/btford/angular-socket-io/issues?labels=faq&page=1&state=closed) might have the answer to your question.\n\n\n## See Also\n\n* [ngSocket](https://github.com/jeffbcross/ngSocket)\n* [angular-socket.io-mock](https://github.com/nullivex/angular-socket.io-mock)\n\n\n## License\nMIT\n",
  "readmeFilename": "README.md",
  "description": "Bower Component for using AngularJS with [Socket.IO](http://socket.io/), based on [this](http://briantford.com/blog/angular-socket-io.html).",
  "_id": "angular-socket-io@0.7.0",
  "_from": "angular-socket-io@^0.7.0"
}
